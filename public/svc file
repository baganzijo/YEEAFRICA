import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import { supabase } from "../supabaseClient";
import defaultAvatar from "../assets/profile_icon.png";
import { saveAs } from 'file-saver';
import Papa from 'papaparse';

const ITEMS_PER_PAGE = 5;

export default function ViewApplications() {
  const { jobId } = useParams();
  const [applications, setApplications] = useState([]);
  const [filteredApps, setFilteredApps] = useState([]);
  const [search, setSearch] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [statusMap, setStatusMap] = useState({});

  useEffect(() => {
    const fetchApplications = async () => {
      const { data, error } = await supabase
        .from("applications")
        .select("*")
        .eq("job_id", jobId)
        .order("created_at", { ascending: false });

      if (error) {
        console.error("Error fetching applications:", error);
      } else {
        setApplications(data || []);
        setFilteredApps(data || []);
      }
    };

    fetchApplications();
  }, [jobId]);

  // Search filter
  useEffect(() => {
    const filtered = applications.filter((app) => {
      const d = app.data || {};
      return (
        d.full_name?.toLowerCase().includes(search.toLowerCase()) ||
        d.email?.toLowerCase().includes(search.toLowerCase()) ||
        d.phone?.toLowerCase().includes(search.toLowerCase()) ||
        d.skills?.toLowerCase().includes(search.toLowerCase()) ||
        d.city?.toLowerCase().includes(search.toLowerCase())
      );
    });
    setFilteredApps(filtered);
    setCurrentPage(1);
  }, [search, applications]);

  const paginatedApps = filteredApps.slice(
    (currentPage - 1) * ITEMS_PER_PAGE,
    currentPage * ITEMS_PER_PAGE
  );

  const handleStatusChange = (id, newStatus) => {
    setStatusMap((prev) => ({ ...prev, [id]: newStatus }));
  };

  const handleDownloadCSV = () => {
    const dataToExport = filteredApps.map((app) => {
      const d = app.data || {};
      return {
        FullName: d.full_name || "",
        Email: d.email || "",
        Phone: d.phone || "",
        City: d.city || "",
        Country: d.country || "",
        School: d.school_name || "",
        Course: d.course_or_subjects || "",
        Skills: d.skills || "",
        Status: statusMap[app.id] || "Pending",
        AppliedOn: new Date(app.created_at).toLocaleString(),
      };
    });

    const csv = Papa.unparse(dataToExport);
    const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
    saveAs(blob, "applications.csv");
  };

  return (
    <div className="max-w-6xl mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4 text-gray-800 dark:text-white">
        Applications
      </h1>

      {/* Search & Export */}
      <div className="flex flex-col md:flex-row justify-between gap-4 mb-6">
        <input
          type="text"
          placeholder="Search by name, email, skill, city..."
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          className="px-4 py-2 border rounded w-full md:max-w-md dark:bg-gray-800 dark:text-white"
        />

        <button
          onClick={handleDownloadCSV}
          className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
        >
          Download CSV
        </button>
      </div>

      {/* Applications */}
      {paginatedApps.length === 0 ? (
        <p className="text-gray-500">No applications found.</p>
      ) : (
        paginatedApps.map((app) => {
          const d = app.data || {};

          return (
            <div
              key={app.id}
              className="bg-white dark:bg-gray-900 p-4 mb-4 rounded shadow"
            >
              <div className="flex gap-4 items-center">
                <img
                  src={d.profile_picture || defaultAvatar}
                  alt="Profile"
                  className="w-16 h-16 rounded-full object-cover"
                />
                <div className="flex-1">
                  <h2 className="text-lg font-bold text-gray-800 dark:text-white">
                    {d.full_name || "Unnamed"}
                  </h2>
                  <p className="text-gray-600 dark:text-gray-300">
                    {d.email} | {d.phone}
                  </p>
                  <p className="text-sm text-gray-500">
                    Applied on: {new Date(app.created_at).toLocaleString()}
                  </p>
                </div>
                <a
                  href={d.cv_url}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-blue-600 underline text-sm"
                >
                  Download CV
                </a>
              </div>

              {/* Skills & Status */}
              <div className="mt-3">
                <p><strong>Skills:</strong> {d.skills || "—"}</p>
                <p><strong>Education:</strong> {d.school_name || "—"} | {d.course_or_subjects || "—"}</p>
              </div>

              <div className="mt-4 flex gap-2">
                {["Accept", "Append", "Reject"].map((status) => (
                  <button
                    key={status}
                    onClick={() => handleStatusChange(app.id, status)}
                    className={`px-3 py-1 rounded text-white ${
                      status === "Accept"
                        ? "bg-green-600 hover:bg-green-700"
                        : status === "Append"
                        ? "bg-yellow-500 hover:bg-yellow-600"
                        : "bg-red-600 hover:bg-red-700"
                    }`}
                  >
                    {status}
                  </button>
                ))}
              </div>

              <p className="mt-2 text-sm text-gray-500">
                Current Status:{" "}
                <span className="font-semibold">
                  {statusMap[app.id] || "Pending"}
                </span>
              </p>
            </div>
          );
        })
      )}

      {/* Pagination */}
      <div className="flex justify-center items-center mt-6 gap-2">
        {Array.from(
          { length: Math.ceil(filteredApps.length / ITEMS_PER_PAGE) },
          (_, i) => (
            <button
              key={i + 1}
              onClick={() => setCurrentPage(i + 1)}
              className={`px-3 py-1 rounded ${
                currentPage === i + 1
                  ? "bg-blue-600 text-white"
                  : "bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-white"
              }`}
            >
              {i + 1}
            </button>
          )
        )}
      </div>
    </div>
  );
}
