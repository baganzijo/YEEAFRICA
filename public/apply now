import React, { useEffect, useState } from "react";
import { supabase } from "../supabaseClient";
import { useParams, useNavigate } from "react-router-dom";
import { toast } from "react-toastify"

export default function ApplyNow() {
  const { jobId } = useParams();
  const navigate = useNavigate();

  const [user, setUser] = useState(null);
  const [role, setRole] = useState("");
  const [profileData, setProfileData] = useState({});
  const [selectedFields, setSelectedFields] = useState({});
  const [cvFile, setCvFile] = useState(null);
  const [cvPreviewName, setCvPreviewName] = useState("");
  const [loading, setLoading] = useState(false);
  const [showConfirm, setShowConfirm] = useState(false);

  useEffect(() => {
    const loadUser = async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;

      setUser(user);
      const { data: profile } = await supabase
        .from("profiles")
        .select("role")
        .eq("id", user.id)
        .single();

      if (profile?.role) {
        setRole(profile.role);
        const { data: detailedProfile } = await supabase
          .from(`${profile.role}s`)
          .select("*")
          .eq("id", user.id)
          .single();

        setProfileData(detailedProfile || {});
        setSelectedFields({
          profile_picture: true,
          full_name: true,
          email: true,
          city: true,
          country: true,
        });
      }
    };

    loadUser();
  }, []);

  const handleCheckboxChange = (key) => {
    setSelectedFields((prev) => ({
      ...prev,
      [key]: !prev[key],
    }));
  };

  const handleCvChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setCvFile(file);
      setCvPreviewName(file.name.length > 30 ? file.name.slice(0, 30) + "..." : file.name);
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    setShowConfirm(true);
  };

  const confirmSubmit = async () => {
    setLoading(true);
    setShowConfirm(false);

    try {
      let cv_url = null;

      if (cvFile) {
        const ext = cvFile.name.split(".").pop();
        const fileName = `cv-${user.id}-${Date.now()}.${ext}`;

        const { error: uploadError } = await supabase.storage
          .from("applications-cv")
          .upload(fileName, cvFile);

        if (uploadError) throw uploadError;

        const { data: publicUrlData } = supabase.storage
          .from("applications-cv")
          .getPublicUrl(fileName);

        cv_url = publicUrlData.publicUrl;
      }

      const submission = {};
      for (const key in selectedFields) {
        if (selectedFields[key]) {
          submission[key] = profileData[key];
        }
      }

      const { error } = await supabase.from("applications").insert({
        user_id: user.id,
        job_id: jobId,
        data: submission,
        role,
        cv_url,
      });

      if (error) throw error;

      toast.success("Application submitted successfully!", {
      autoClose: 3000,
      onClose: () =>
        navigate("/home"),
    });
    } catch (err) {
      console.error(err);
      toast.error("Failed to submit application.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-3xl mx-auto p-6 bg-white dark:bg-gray-950 mt-12 shadow rounded">
      <h2 className="text-2xl font-bold mb-4 text-gray-800 dark:text-white">Preview your details before submitting your application</h2>

      <p className="text-sm text-gray-600 dark:text-gray-300 mb-6">
        Your advised to check the details below and update where necessary. Check the checkboxes for what should not be sent
        <br />
        Your <strong>name, profile picture, email  </strong>and <strong>location</strong> can't be altered. But you can always update your profile at any time from the profile page
      </p>

<div className="space-y-4">
  {/* Profile Picture */}
  <div className="flex items-center gap-3">
    <label className="w-40 font-medium text-gray-700 dark:text-gray-200">Profile Picture:</label>
    <img
      src={profileData.profile_picture || "/default-avatar.png"}
      alt="Profile"
      className="w-16 h-16 rounded-full object-cover"
    />
  </div>

  {/* Full Name */}
  <div className="flex items-center gap-3">
    <label className="w-40 font-medium text-gray-700 dark:text-gray-200">Full Name:</label>
    <span className="text-gray-600 dark:text-gray-300">{profileData.full_name || "Not provided"}</span>
  </div>

  {/* Email */}
  <div className="flex items-center gap-3">
    <label className="w-40 font-medium text-gray-700 dark:text-gray-200">Email:</label>
    <span className="text-gray-600 dark:text-gray-300">{profileData.email || "Not provided"}</span>
  </div>

  {/* Phone Number */}
  <div className="flex items-center gap-3">
    <input
      type="checkbox"
      checked={!!selectedFields.phone}
      onChange={() => handleCheckboxChange("phone")}
    />
    <label className="w-40 font-medium text-gray-700 dark:text-gray-200">Phone Number:</label>
    <span className="text-gray-600 dark:text-gray-300">{profileData.phone || "Not provided"}</span>
  </div>

  {/* School Level */}
  <div className="flex items-center gap-3">
    <input
      type="checkbox"
      checked={!!selectedFields.school_level}
      onChange={() => handleCheckboxChange("school_level")}
    />
    <label className="w-40 font-medium text-gray-700 dark:text-gray-200">School Level:</label>
    <span className="text-gray-600 dark:text-gray-300">{profileData.school_level || "Not provided"}</span>
  </div>

  {/* School Name */}
  <div className="flex items-center gap-3">
    <input
      type="checkbox"
      checked={!!selectedFields.school_name}
      onChange={() => handleCheckboxChange("school_name")}
    />
    <label className="w-40 font-medium text-gray-700 dark:text-gray-200">School Name:</label>
    <span className="text-gray-600 dark:text-gray-300">{profileData.school_name || "Not provided"}</span>
  </div>

  {/* Course or Subject(s) */}
  <div className="flex items-center gap-3">
    <input
      type="checkbox"
      checked={!!selectedFields.course_or_subjects}
      onChange={() => handleCheckboxChange("course_or_subjects")}
    />
    <label className="w-40 font-medium text-gray-700 dark:text-gray-200">Course/Subjects:</label>
    <span className="text-gray-600 dark:text-gray-300">{profileData.course_or_subjects || "Not provided"}</span>
  </div>

  {/* City */}
  <div className="flex items-center gap-3">
    <label className="w-40 font-medium text-gray-700 dark:text-gray-200">City:</label>
    <span className="text-gray-600 dark:text-gray-300">{profileData.city || "Not provided"}</span>
  </div>

  {/* Country */}
  <div className="flex items-center gap-3">
    <label className="w-40 font-medium text-gray-700 dark:text-gray-200">Country:</label>
    <span className="text-gray-600 dark:text-gray-300">{profileData.country || "Not provided"}</span>
  </div>

  {/* Previous CV */}
  {profileData.cv_url && (
    <div className="flex items-center gap-3">
      <label className="w-40 font-medium text-gray-700 dark:text-gray-200">Existing CV:</label>
      <a
        href={profileData.cv_url}
        target="_blank"
        rel="noopener noreferrer"
        className="text-blue-600 underline"
      >
        View CV
      </a>
    </div>
  )}

  {/* Upload another CV */}
  <div>
    <p className="text-sm text-gray-600 dark:text-gray-400 mb-1">
      You may add another CV from your device:
    </p>
    <input type="file" accept=".pdf,.doc,.docx" onChange={handleCvChange} />
    {cvPreviewName && (
      <p className="mt-2 text-sm text-gray-600 dark:text-gray-300">
        Selected file: {cvPreviewName}
      </p>
    )}
  </div>
</div>

      <form onSubmit={handleSubmit} className="mt-6">
        <button
          type="submit"
          disabled={loading}
          className="w-full bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700 disabled:opacity-50"
        >
          {loading ? "Submitting..." : "Submit Application"}
        </button>
      </form>

      {/* Confirmation Dialog */}
      {showConfirm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-gray-800 p-6 rounded shadow-lg max-w-md w-full">
            <h3 className="text-lg font-semibold mb-4 text-gray-900 dark:text-white">
              Confirm Submission
            </h3>
            <p className="text-gray-700 dark:text-gray-300 mb-6">
              Are you sure you want to submit your application? You won’t be able to edit it after submission.
            </p>
            <div className="flex justify-end gap-4">
              <button
                onClick={() => setShowConfirm(false)}
                className="bg-gray-200 text-gray-800 px-4 py-2 rounded hover:bg-gray-300"
              >
                Cancel
              </button>
              <button
                onClick={confirmSubmit}
                className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
              >
                Confirm
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

function Field({ label, value }) {
  return (
    <div className="flex flex-col">
      <span className="text-sm text-gray-500">{label}</span>
      <span className="text-gray-800 dark:text-gray-200">{value || "—"}</span>
    </div>
  );
}
