import React, { useEffect, useState } from "react";
import { supabase } from "../supabaseClient";
import { Link } from "react-router-dom";
import defaultLogo from "../assets/job.svg";
import heartIcon from "../assets/star_icon.png"; // Favorites icon

export default function Home() {
  const [jobs, setJobs] = useState([]);
  const [userName, setUserName] = useState("User");
  const [greeting, setGreeting] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [filtersOpen, setFiltersOpen] = useState(false);
  const [filters, setFilters] = useState({
    company: "",
    type: "",
    fresher: false,
    industry: "",
    minSalary: "",
    location: "",
    remote: false,
    contract: false,
  });
  const [activeCategory, setActiveCategory] = useState("");

  const categories = [
    "Tech",
    "Design",
    "Media",
    "Remote",
    "Construction",
    "Healthcare",
    "Education",
    "Engineering",
    "Marketing",
    "Agriculture",
    "HR",
  ];

  useEffect(() => {
    const now = new Date();
    const hour = now.getHours();
    if (hour < 12) setGreeting("Good morning");
    else if (hour < 18) setGreeting("Good afternoon");
    else setGreeting("Good evening");

    async function loadUser() {
      const { data: { user } } = await supabase.auth.getUser();
      if (user) {
        const { data: profile } = await supabase.from("profiles")
          .select("full_name")
          .eq("id", user.id)
          .single();
        setUserName(profile?.full_name.split(" ")[0] || "User");
      }
    }
    loadUser();
  }, []);

  useEffect(() => {
    async function loadJobs() {
      let query = supabase.from("jobs").select("*").order("created_at", { ascending: false });
      const { data, error } = await query;
      if (!error) setJobs(data);
    }
    loadJobs();
  }, []);

  const applyFilters = (raw) => {
    let arr = raw;
    if (searchTerm) {
      const term = searchTerm.toLowerCase();
      arr = arr.filter(j => j.title.toLowerCase().includes(term) || j.company_name?.toLowerCase().includes(term));
    }
    if (filters.type) arr = arr.filter(j => j.type === filters.type);
    if (filters.minSalary) arr = arr.filter(j => j.salary >= filters.minSalary);
    if (filters.company) arr = arr.filter(j => j.company_name?.toLowerCase().includes(filters.company.toLowerCase()));
    if (filters.location) arr = arr.filter(j => j.location?.toLowerCase().includes(filters.location.toLowerCase()));
    if (filters.fresher) arr = arr.filter(j => j.experience_level === "Fresher");
    if (filters.remote) arr = arr.filter(j => j.type === "Remote");
    if (filters.contract) arr = arr.filter(j => j.type === "Contract");
    if (activeCategory) {
      arr = arr.filter(j =>
        j.industry === activeCategory ||
        j.title.toLowerCase().includes(activeCategory.toLowerCase())
      );
    }
    return arr;
  };

  const filtered = applyFilters(jobs);
  const recommended = filtered.slice(0, 4);
  const newAndUpdated = jobs.slice(0, 4);

  return (
    <div className="p-6 max-w-7xl mx-auto space-y-8">
      {/* Greeting + Search */}
      <header className="text-center">
        <h2 className="text-3xl font-semibold">{greeting}, {userName} ðŸ‘‹</h2>
        <div className="mx-auto mt-4 relative">
          <input
            type="text"
            value={searchTerm}
            onChange={e => setSearchTerm(e.target.value)}
            onFocus={() => setFiltersOpen(true)}
            placeholder="Search jobs, companies..."
            className="p-3 w-full max-w-lg border rounded-full shadow"
          />
          {filtersOpen && (
            <div className="absolute bg-white dark:bg-gray-800 shadow-lg p-4 mt-2 rounded w-full max-w-lg z-10 space-y-2">
              <input
                placeholder="Company"
                className="w-full border p-2 rounded"
                value={filters.company}
                onChange={e => setFilters(f => ({ ...f, company: e.target.value }))}
              />
              <select
                className="w-full border p-2 rounded"
                value={filters.type}
                onChange={e => setFilters(f => ({ ...f, type: e.target.value }))}
              >
                <option value="">Any Job Type</option>
                <option>Full-time</option>
                <option>Part-time</option>
                <option>Internship</option>
                <option>Contract</option>
                <option>Remote</option>
              </select>
              <select
                className="w-full border p-2 rounded"
                value={filters.industry}
                onChange={e => setFilters(f => ({ ...f, industry: e.target.value }))}
              >
                <option value="">Any Industry</option>
                {["Tech", "Design", "Media", "Healthcare", "Education", "Engineering", "Marketing"].map(i => (
                  <option key={i}>{i}</option>
                ))}
              </select>
              <input
                type="number"
                placeholder="Min Salary USD"
                className="w-full border p-2 rounded"
                value={filters.minSalary}
                onChange={e => setFilters(f => ({ ...f, minSalary: e.target.value }))}
              />
              <input
                placeholder="Location (city)"
                className="w-full border p-2 rounded"
                value={filters.location}
                onChange={e => setFilters(f => ({ ...f, location: e.target.value }))}
              />
              <div className="flex gap-4">
                <label><input type="checkbox" checked={filters.fresher} onChange={() => setFilters(f => ({ ...f, fresher: !f.fresher }))} /> Fresher</label>
                <label><input type="checkbox" checked={filters.remote} onChange={() => setFilters(f => ({ ...f, remote: !f.remote }))} /> Remote</label>
                <label><input type="checkbox" checked={filters.contract} onChange={() => setFilters(f => ({ ...f, contract: !f.contract }))} /> Contract</label>
              </div>
              <button className="mt-2 px-4 py-2 bg-blue-600 text-white rounded" onClick={() => setFiltersOpen(false)}>Done</button>
            </div>
          )}
        </div>
      </header>

      {/* Carousel (placeholder) */}
      <div className="h-48 bg-gray-200 dark:bg-gray-700 rounded-lg flex items-center justify-center">
        <span className="text-gray-500">[Ad Carousel Here]</span>
      </div>

      {/* Recommended */}
      <section>
        <h3 className="text-2xl font-semibold mb-4">Recommended for you</h3>
        <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {recommended.map(job => (
            <JobCard key={job.id} job={job} />
          ))}
        </div>
      </section>

      {/* New & Updated */}
      <section>
        <h3 className="text-2xl font-semibold mb-4">New & Updated</h3>
        <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {newAndUpdated.map(job => (
            <JobCard key={job.id} job={job} />
          ))}
        </div>
      </section>

      {/* Categories */}
      <section>
        <h3 className="text-2xl font-semibold mb-4">Browse by Category</h3>
        <div className="flex flex-wrap gap-3 mb-6">
          {categories.map(cat => (
            <button
              key={cat}
              className={`px-4 py-2 rounded ${activeCategory === cat ? "bg-blue-600 text-white" : "bg-gray-200 dark:bg-gray-700"}`}
              onClick={() => setActiveCategory(activeCategory === cat ? "" : cat)}
            >
              {cat}
            </button>
          ))}
        </div>
        <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {filtered.map(job => (
            <JobCard key={job.id} job={job} />
          ))}
        </div>
      </section>
    </div>
  );
}

function JobCard({ job }) {
  return (
    <div className="border rounded-lg shadow-md p-4 flex flex-col justify-between bg-white dark:bg-gray-800">
      <div className="flex justify-between items-center mb-4">
        <img
          src={job.company_logo || defaultLogo}
          alt="Company Logo"
          className="w-12 h-12 object-cover rounded-full"
        />
        <span className="px-2 py-1 text-xs bg-blue-100 text-blue-600 rounded">
          {job.type}
        </span>
      </div>

      <h3 className="text-lg font-semibold text-gray-800 dark:text-white mb-1">{job.title}</h3>
      <p className="text-sm text-gray-600 dark:text-gray-300 mb-2">
        {job.company_name} <span className="mx-1">â€¢</span> {job.location}
      </p>

      <div className="flex justify-between items-center mt-auto">
        <Link to={`/job/${job.id}`} className="text-blue-600 hover:underline text-sm font-medium">
          View Details
        </Link>
        <img src={heartIcon} alt="Favorite" className="w-5 h-5" />
      </div>
      {job.salary && (
        <p className="text-center mt-4 text-sm font-semibold text-green-600">
          ${job.salary} USD
        </p>
      )}
    </div>
  );
}

//slider images
import ad1 from "../assets/internships.jpg"; // replace with your custom adverts
import ad2 from "../assets/jobs.jpg"
import ad3 from "../assets/students.png"
import ad4 from "../assets/courses.jpg"
import ad5 from "../assets/contact_img.png"

//const
const advertImages = [ad1, ad2, ad3, ad4, ad5];